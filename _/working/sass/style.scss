body, html {
	overflow: hidden;
	perspective-origin: 25% 75%;
	background-color: blue;
}
ul {
	list-style: none;
}
.hide {
	background: none !important;
}
#target {
	margin: auto;
	background-color: green;
	/*transform: perspective(400px) rotateX(85deg);*/
	width: 1200px;
	height: 1200px;
	background-image: url(http://www.nesmaps.com/maps/Zelda2/ZeldaIIMapOverworld.png);
	background-size: cover;
	background-position: center;
	
	animation-timing-function: linear;
	animation-iteration-count: infinite;
	animation-duration: 15s;
	transform-style: preserve-3d;
	position: relative;
	
	/* comment for live */
	transform: perspective(400px) rotateX(85deg) rotateZ(0deg);
	/* uncomment for live */
	animation-name: spin;
}
#castle {
    transform: translateZ(-19px) rotateY(90deg);
    position: absolute;
    /*left: 70%;
	top: 33%;*/
	left: 51%;
    top: 73%;
    list-style: none;
    transform-style: preserve-3d;
}

.bricks {
	transform-style: preserve-3d;
	background-image: url(../../_/assets/images/brick1.png);
    background-size: cover;
    width: 5px;
    height: 5px;
    position: absolute;
    &.window {
    	background-image: url(../../_/assets/images/window.png) !important;	
    }
}

/* Rotate the walls */
.wall2 .row {
	transform-style: preserve-3d;
	transform: rotateX(90deg);
}
/* Rotate the walls */
.wall3 .row {
	transform-style: preserve-3d;
	transform: rotateX(0deg);
}
/* Rotate the walls */
.wall4 .row {
	transform-style: preserve-3d;
	transform: rotateX(90deg);
}

@keyframes spin {
	 from{
	 	transform: perspective(400px) rotateX(85deg) rotateZ(0deg);

	 }
	 to{
	 	transform: perspective(400px) rotateX(85deg) rotateZ(360deg);
	 }
}
@mixin buildWall($wall, $row, $bricks, $zz: 0, $k: 0) {
	$j: $k;
	$z: $row * 2;
	@for $i from 1 to $bricks {
		.wall#{$wall} .row#{$row} .bricks:nth-child(#{$i}) {
			left: 0;
			top: 0;
			transform: translateZ($zz + px) translateY($j + px) translateX(-$z + px);
		}
		$j: $j + 2; 
	}
}
/* Wall 1 */
@include buildWall(1, 1, 16);
@include buildWall(1, 2, 16);
@include buildWall(1, 3, 16);
@include buildWall(1, 4, 16);
@include buildWall(1, 5, 16);
@include buildWall(1, 6, 16);
@include buildWall(1, 7, 16);

/* Wall 2 */
@include buildWall(2, 1, 16, 16);
@include buildWall(2, 2, 16, 16);
@include buildWall(2, 3, 16, 16);
@include buildWall(2, 4, 16, 16);
@include buildWall(2, 5, 16, 16);
@include buildWall(2, 6, 16, 16);
@include buildWall(2, 7, 16, 16);

/* Wall 3 */
@include buildWall(3, 1, 16, 30.5, -16);
@include buildWall(3, 2, 16, 30.5, -16);
@include buildWall(3, 3, 16, 30.5, -16);
@include buildWall(3, 4, 16, 30.5, -16);
@include buildWall(3, 5, 16, 30.5, -16);
@include buildWall(3, 6, 16, 30.5, -16);
@include buildWall(3, 7, 16, 30.5, -16);

/* Wall 4 */
@include buildWall(4, 1, 16, -13);
@include buildWall(4, 2, 16, -13);
@include buildWall(4, 3, 16, -13);
@include buildWall(4, 4, 16, -13);
@include buildWall(4, 5, 16, -13);
@include buildWall(4, 6, 16, -13);
@include buildWall(4, 7, 16, -13);